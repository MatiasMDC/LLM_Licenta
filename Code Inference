#!/usr/bin/env python3
import torch
from transformers import AutoModelForCausalLM, AutoTokenizer, BitsAndBytesConfig

def main():
    # ─── Paths ──────────────────────────────────────────────────────────────────
    # tokenizer_dir needs the tokenizer files (vocab.json, tokenizer.model, etc.)
    tokenizer_dir = "/mnt/d/llama_wsl/models/tinyllama-merged"
    # model_dir is your fully merged safetensors + config
    model_dir     = "/mnt/d/llama_wsl/models/tinyllama-merged-full"

    # ─── 8-bit quantization config ───────────────────────────────────────────────
    bnb = BitsAndBytesConfig(
        load_in_8bit=True,
        llm_int8_threshold=6.0
    )

    print(f"Loading tokenizer from {tokenizer_dir} …")
    tokenizer = AutoTokenizer.from_pretrained(
        tokenizer_dir,
        local_files_only=True
    )

    print(f"Loading fully merged model from {model_dir} in 8-bit …")
    model = AutoModelForCausalLM.from_pretrained(
        model_dir,
        quantization_config=bnb,
        device_map="auto",
        local_files_only=True
    )
    model.eval()

    # ─── System prompt ───────────────────────────────────────────────────────────
    system = (
        "You are an expert survival assistant, deployed in the wild with no internet connection."
        "Answer each question with clear instructions.\n\n"
    )

    print("✅ Fully merged model ready! Type your questions below (Ctrl-D to exit):")
    while True:
        try:
            q = input("Q> ").strip()
        except EOFError:
            break
        if not q:
            continue

        # Build the prompt
        prompt = f"{system}Q: {q}\nA:"
        inputs = tokenizer(prompt, return_tensors="pt").to(model.device)

        # Generate
        with torch.no_grad():
            out = model.generate(
                **inputs,
                max_new_tokens=256,
                temperature=0.7,
                top_p=0.9,
                do_sample=True,
                pad_token_id=tokenizer.eos_token_id,
            )

        full = tokenizer.decode(out[0], skip_special_tokens=True)
        # strip off the prompt
        ans = full[len(prompt):].strip()
        # remove any accidental trailing "Q:" from model
        if "\nQ:" in ans:
            ans = ans.split("\nQ:")[0].strip()

        print("A>", ans, "\n")

if __name__ == "__main__":
    main()
